#include <iostream>
#include <iomanip>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>

using namespace std;

// Struct to represent customer account details
struct Customer {
    string username;
    string password;
    int accountNumber;
    string memberLevel;
    double storeCredit;
    string address;
};

// Struct to represent product information
struct Product {
    string SKU;
    string name;
    int itemsInUnit;
    double pricePerUnit;
    int quantityOnHand;
};

// Function prototypes
void readCustomerData(vector<Customer>& customers);
void readProductData(vector<Product>& products);
bool authenticateUser(const vector<Customer>& customers, Customer& loggedInCustomer);
void purchaseItem(vector<Customer>& customers, vector<Product>& products, Customer& loggedInCustomer);
void viewAllItems(const vector<Product>& products);
void getEstimate(const vector<Product>& products);
void updateAccount(vector<Customer>& customers, Customer& loggedInCustomer);
void writeCustomerData(const vector<Customer>& customers);
void writeTransaction(const Customer& customer, const Product& product, int quantity, double totalCost);

int main() {
    vector<Customer> customers;
    vector<Product> products;
    readCustomerData(customers);
    readProductData(products);

    // Authenticate the user
    Customer loggedInCustomer;
    if (!authenticateUser(customers, loggedInCustomer)) {
        cout << "Too many failed attempts. Exiting program." << endl;
        return 1;
    }

    int userChoice;
    int transactionCount = 0;
    while (transactionCount < 3) {
        // Display menu options
        cout << "\nMenu Options:\n";
        cout << "1 - Purchase an item\n";
        cout << "2 - View all items\n";
        cout << "3 - Get an estimate\n";
        cout << "4 - Update Account\n";
        cout << "5 - Log Out\n";
        cout << "Enter your choice: ";
        cin >> userChoice;

        // Based on user's choice, call the corresponding function
        switch (userChoice) {
            case 1:
                purchaseItem(customers, products, loggedInCustomer);
                transactionCount++;
                break;
            case 2:
                viewAllItems(products);
                break;
            case 3:
                getEstimate(products);
                break;
            case 4:
                updateAccount(customers, loggedInCustomer);
                break;
            case 5:
                cout << "Logging out. Goodbye!" << endl;
                return 0;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }

    cout << "Maximum transaction limit reached. Logging out. Goodbye!" << endl;
    return 0;
}

// Function to read customer data from file
void readCustomerData(vector<Customer>& customers) {
    ifstream file("accounts.dat");
    if (file.is_open()) {
        Customer customer;
        while (file >> customer.username >> customer.password >> customer.accountNumber >> customer.memberLevel
               >> customer.storeCredit >> ws && getline(file, customer.address)) {
            customers.push_back(customer);
        }
        file.close();
    } else {
        cerr << "Unable to open accounts.dat file." << endl;
    }
}

// Function to read product data from file
void readProductData(vector<Product>& products) {
    ifstream file("products.csv");
    if (file.is_open()) {
        Product product;
        string line;
        getline(file, line); // Skip header line
        while (getline(file, line)) {
            stringstream ss(line);
            getline(ss, product.SKU, ',');
            getline(ss, product.name, ',');
            ss >> product.itemsInUnit >> product.pricePerUnit >> product.quantityOnHand;
            products.push_back(product);
        }
        file.close();
    } else {
        cerr << "Unable to open products.csv file." << endl;
    }
}

// Function to authenticate user credentials
bool authenticateUser(const vector<Customer>& customers, Customer& loggedInCustomer) {
    string username, password;
    cout << "Enter your username: ";
    cin >> username;
    cout << "Enter your password: ";
    cin >> password;

    // Check if username and password match customer's credentials
    for (const auto& customer : customers) {
        if (username == customer.username && password == customer.password) {
            loggedInCustomer = customer;
            cout << "Authentication successful. Welcome, " << loggedInCustomer.username << "!\n";
            return true;
        }
    }

    cout << "Incorrect username or password. Please try again." << endl;
    return false;
}

// Function to allow the user to purchase an item
void purchaseItem(vector<Customer>& customers, vector<Product>& products, Customer& loggedInCustomer) {
    // Display available items
    viewAllItems(products);

    // Prompt user to select an item to purchase
    string SKU;
    cout << "Enter the SKU of the item you want to purchase: ";
    cin >> SKU;

    // Find the selected product in the products vector
    Product* selectedProduct = nullptr;
    for (auto& product : products) {
        if (product.SKU == SKU) {
            selectedProduct = &product;
            break;
        }
    }

    // Check if product exists
    if (selectedProduct == nullptr) {
        cout << "Invalid SKU. Please try again." << endl;
        return;
    }

    // Prompt user for quantity to purchase
    int quantity;
    cout << "Enter the quantity you want to purchase: ";
    cin >> quantity;

    // Check if quantity is available
    if (quantity > selectedProduct->quantityOnHand) {
        cout << "Insufficient quantity available." << endl;
        return;
    }

    // Calculate total cost
    double subtotal = selectedProduct->pricePerUnit * quantity;
    double salesTax = subtotal * 0.06;
    double totalCost = subtotal + salesTax;

    // Check if customer has enough store credit
    if (totalCost > loggedInCustomer.storeCredit) {
        cout << "Insufficient store credit." << endl;
        return;
    }

    // Update quantity on hand
    selectedProduct->quantityOnHand -= quantity;

    // Update customer's store credit
    loggedInCustomer.storeCredit -= totalCost;

    // Display receipt
    cout << "\nPurchase Receipt:\n";
    cout << "Item: " << selectedProduct->name << endl;
    cout << "Quantity: " << quantity << endl;
    cout << "Price per unit: $" << selectedProduct->pricePerUnit << endl;
    cout << "Subtotal: $" << fixed << setprecision(2) << subtotal << endl;
    cout << "Sales Tax (6%): $" << salesTax << endl;
    cout << "Total Cost: $" << totalCost << endl;
    cout << "Updated store credit: $" << loggedInCustomer.storeCredit << endl;

    // Write updated customer data to file
    writeCustomerData(customers);

    // Write transaction details to file
    writeTransaction(loggedInCustomer, *selectedProduct, quantity, totalCost);
}

// Function to view all available items
void viewAllItems(const vector<Product>& products) {
    cout << "\nAvailable Items:\n";
    cout << setw(10) << "SKU" << setw(15) << "Name" << setw(15) << "Price Per Unit" << setw(20) << "Quantity On Hand\n";
    for (const auto& product : products) {
        cout << setw(10) << product.SKU << setw(15) << product.name << setw(15) << product.pricePerUnit << setw(20) << product.quantityOnHand << endl;
    }
}

// Function to get an estimate of the cost for purchasing an item
void getEstimate(const vector<Product>& products) {
    // Display available items
    viewAllItems(products);

    // Prompt user to select an item for estimation
    string SKU;
    cout << "Enter the SKU of the item you want to estimate: ";
    cin >> SKU;

    // Find the selected product in the products vector
    const Product* selectedProduct = nullptr;
    for (const auto& product : products) {
        if (product.SKU == SKU) {
            selectedProduct = &product;
            break;
        }
    }

    // Check if product exists
    if (selectedProduct == nullptr) {
        cout << "Invalid SKU. Please try again." << endl;
        return;
    }

    // Prompt user for quantity for estimation
    int quantity;
    cout << "Enter the quantity for estimation: ";
    cin >> quantity;

    // Calculate total cost for estimation
    double subtotal = selectedProduct->pricePerUnit * quantity;
    double salesTax = subtotal * 0.06;
    double totalCost = subtotal + salesTax;

    // Display estimation
    cout << "\nEstimation:\n";
    cout << "Item: " << selectedProduct->name << endl;
    cout << "Quantity: " << quantity << endl;
    cout << "Price per unit: $" << selectedProduct->pricePerUnit << endl;
    cout << "Subtotal: $" << fixed << setprecision(2) << subtotal << endl;
    cout << "Sales Tax (6%): $" << salesTax << endl;
    cout << "Total Cost: $" << totalCost << endl;
}

// Function to update customer account information
void updateAccount(vector<Customer>& customers, Customer& loggedInCustomer) {
    cout << "\nUpdate Account Information:\n";
    cout << "1. Update Password\n";
    cout << "2. Update Address\n";
    cout << "Enter your choice: ";

    int choice;
    cin >> choice;

    switch (choice) {
        case 1:
            cout << "Enter new password: ";
            cin >> loggedInCustomer.password;
            cout << "Password updated successfully." << endl;
            break;
        case 2:
            cout << "Enter new address: ";
            cin.ignore(); // Ignore newline character
            getline(cin, loggedInCustomer.address);
            cout << "Address updated successfully." << endl;
            break;
        default:
            cout << "Invalid choice. Please try again." << endl;
            break;
    }

    // Write updated customer data to file
    writeCustomerData(customers);
}

// Function to write updated customer data to file
void writeCustomerData(const vector<Customer>& customers) {
    ofstream file("accounts.dat");
    if (file.is_open()) {
        for (const auto& customer : customers) {
            file << customer.username << " " << customer.password << " " << customer.accountNumber << " "
                 << customer.memberLevel << " " << customer.storeCredit << " " << customer.address << endl;
        }
        file.close();
    } else {
        cerr << "Unable to open accounts.dat file for writing." << endl;
    }
}

// Function to write transaction details to file
void writeTransaction(const Customer& customer, const Product& product, int quantity, double totalCost) {
    ofstream file("transactions.dat", ios::app);
    if (file.is_open()) {
        file << customer.accountNumber << " " << customer.username << " " << product.SKU << " "
             << quantity << " " << totalCost << endl;
        file.close();
    } else {
        cerr << "Unable to open transactions.dat file for writing." << endl;
    }
}
